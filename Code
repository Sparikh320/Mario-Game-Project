# Anthony Esquivel afe2xd, afe2xd, Sahil Parikh sp4qf
import pygame
import gamebox
import math

# Game - related
camera = gamebox.Camera(800, 600)
position = 400
game_on = False
timer = 0
past_save = False

# Mario
#mario_sprite_sheet = gamebox.load_sprite_sheet("Mario_Spritesheet.png", 10, 13)
mario = gamebox.from_image(100, 530, "mario.png")
mario.size = (32, 40)
health = 15

# Goomba
goomba = gamebox.from_image(300, 530, "Goomba.png")
goomba.size = (25, 35)
goomba_dead = False
goomba_velocity = 5

# Koopa
koopa_down = False
koopa_dead = False
koopa_x = 1300
koopa_velocity = 6
koopa_standing = gamebox.from_image(koopa_x, 530, "Koopa.png")
koopa_standing.size = (25, 40)
koopa_spinning = gamebox.from_image(koopa_x, 1000, "koopa_shell.png")
koopa_spinning.size = (25, 20)

# Bowser
bowser = gamebox.from_image(3400, 525, "Bowser.png")
bowser.size = (35, 45)
bowser_velocity = 0
bowser_health = 3
bowser_dead = False

# Peach
peach = gamebox.from_image(4200, 550, "Princess_Peach.png")
peach.size = (25, 100)

# Fire Flower
fire_flower = gamebox.from_image(2400, 520, "Priranha_plant.png")
fire_flower.size = (25, 60)
fire_flower.flip()
ball_of_fire = gamebox.from_image(2400, 800, "fireball-clipart.png")
ball_of_fire.size = (35, 35)

# Traps
traps = [gamebox.from_image(650, 530, "Spikes.png"),
         gamebox.from_image(1050, 530, "Spikes.png"),
         gamebox.from_image(2250, 530, "Spikes.png"),
         gamebox.from_image(3100, 530, "Spikes.png")]
for trap in traps:
    trap.size = (50, 40)

# Save Point
save_point_flag = gamebox.from_image(2500, 505, "save_point_flag.png")
save_point_flag.size = (30, 120)

heart_drawing_counter = 0
list_of_hearts = []
while heart_drawing_counter < health:
    list_of_hearts.append(gamebox.from_image((position - 380 + (heart_drawing_counter * 35)), 23, "Heart.png"))
    list_of_hearts[heart_drawing_counter].size = (25, 40)
    heart_drawing_counter += 1

# Borders
borders = [gamebox.from_color(400, 575, "green", 800, 50),
           gamebox.from_color(500, 450, "brown", 50, 50),
           gamebox.from_color(650, 350, "brown", 50, 50),
           gamebox.from_color(1300, 575, "green", 800, 50),
           gamebox.from_color(850, 300, "brown", 150, 50),
           gamebox.from_color(1000, 200, "brown", 50, 50),
           gamebox.from_color(1200, 200, "brown", 50, 50),
           gamebox.from_color(1200, 450, "brown", 150, 50),
           gamebox.from_color(1400, 350, "brown", 100, 50),
           gamebox.from_color(2200, 575, "green", 800, 50)
           ]

final_wall = gamebox.from_color(3500, 300, "gold", 30, 600)

all_borders = [
    gamebox.from_color(400, 575, "green", 800, 50),
    gamebox.from_color(500, 450, "brown", 50, 50),
    gamebox.from_color(650, 350, "brown", 50, 50),
    gamebox.from_color(1300, 575, "green", 800, 50),
    gamebox.from_color(850, 300, "brown", 150, 50),
    gamebox.from_color(1000, 200, "brown", 50, 50),
    gamebox.from_color(1200, 200, "brown", 50, 50),
    gamebox.from_color(1200, 450, "brown", 150, 50),
    gamebox.from_color(1400, 350, "brown", 100, 50),
    gamebox.from_color(2200, 575, "green", 800, 50),
    gamebox.from_color(2000, 450, "brown", 100, 50),
    gamebox.from_color(2200, 350, "brown", 50, 50),
    gamebox.from_color(3100, 575, "green", 800, 50),
    gamebox.from_color(3000, 350, "brown", 100, 50),
    gamebox.from_color(3200, 450, "brown", 100, 50),
    gamebox.from_color(3900, 575, "green", 800, 50),
    final_wall
]

count = 8

def border_func(death=False):
    """
    Removes and adds borders to the game to make it run faster. Removes borders off the left side of the screen and adds
    new ones off the right side of the screen.
    :param death: Bool that is made True when mario dies
    :return: None
    """
    global borders
    global count
    if death:
        if not past_save:
            borders = all_borders[0:9]
            count = 8
        else:
            borders = all_borders[-9:]
            count = 8
    else:
        for border in borders[0:3]:
            if border.right < position - 400 and count != 0:
                count += 1
                borders.remove(border)
                try:
                    borders.append(all_borders[count])
                except:
                    count = 0
                    break

def fireball(source_x_position, rate):
    """
    Shoots fireballs from the given enemy position at given intervals.
    :param source_x_position: Int x position of the enemy shooting the fireball.
    :param rate: Int that gives the fire rate of the fireball
    :return: None
    """
    global timer
    velocity = 12
    if timer % rate == 0:
        ball_of_fire.x = source_x_position
        ball_of_fire.y = 520
        x_distance = mario.x - source_x_position
        y_distance = mario.y - 520
        length = math.sqrt((x_distance ** 2) + (y_distance ** 2))
        ball_of_fire.speedx = velocity * (x_distance / length)
        ball_of_fire.speedy = velocity * (y_distance / length)


def dead():
    """
    When mario is killed, reset everything to the beginning or save point and subtract from health.
    Displays game over if health is 0.
    :return: None
    """
    global health
    global past_save
    global position
    global goomba_dead
    global koopa_dead
    global koopa_down
    global koopa_x
    global koopa_y
    global goomba_velocity
    global koopa_velocity
    global bowser_velocity
    global bowser_health
    global timer
    global bowser_dead
    timer = 0  # This resets the global timer, to make sure Mario waits a second before moving again

    border_func(True)

    health -= 1
    if health < 1:
        camera.center = [400, 300]
        camera.draw(gamebox.from_text(400, 200, "Game over", 40, "Red"))
        gamebox.pause()
    elif past_save:
        camera.center = [2500, 300]
        mario.x = 2500
        mario.y = 100
    else:
        camera.center = [400, 300]
        mario.x = 100
        mario.y = 100
        mario.xspeed = 0
        mario.yspeed = 0

    position = 400
    goomba_dead = False
    goomba.x = 300
    goomba.y = 530
    goomba_velocity = 5

    koopa_dead = False
    koopa_down = False
    koopa_standing.x = 1300
    koopa_standing.y = 530
    koopa_spinning.y = 1000
    koopa_velocity = 7

    bowser_dead = False
    bowser.x = 3400
    bowser.y = 525
    bowser_health = 3
    bowser_velocity = 0

    final_wall.y = 300
    final_wall.speedy = 0

def tick(keys):
    """
    The general code for the game that moves and creates everything.
    :param keys: Keyboard input.
    :return: None
    """
    global game_on
    global position
    global goomba_dead
    global koopa_down
    global koopa_dead
    global health
    global koopa_x
    global koopa_y
    global past_save
    global goomba_velocity
    global koopa_velocity
    global bowser_velocity
    global timer
    global bowser_health
    global bowser_dead

    ## INTRODUCTION
    camera.clear("lightblue")
    if not game_on:
        camera.draw(gamebox.from_text(400, 100, "Mario", 50, "Red"))
        camera.draw(gamebox.from_text(400, 140, "By Anthony Esquivel(afe2xd) and Sahil Parikh(sp4qf)", 40, "Black"))
        camera.draw(gamebox.from_text(400, 200, "Use arrow keys to move and jump", 40, "Black"))
        camera.draw(gamebox.from_text(400, 240, "Avoid enemies and traps and save Princess Peach to win", 40, "Black"))
        camera.draw(gamebox.from_text(400, 280, "Kill enemies by jumping on them", 40, "Black"))
        camera.draw(gamebox.from_text(400, 350, "Press space to start", 40, "Red"))
    if pygame.K_SPACE in keys:
        game_on = True

    # End of game
    if mario.x >= 4100:
        mario.y = 530
        camera.draw(gamebox.from_text(4100, 100, "YOU WIN!", 50, "Red"))
        camera.draw(gamebox.from_text(4100, 200, "You have defeated the enemies and saved Princess Peach!", 40, "Red"))
        gamebox.pause()

    # Continuously removes and adds walls
    border_func()

    ## OBJECT MOVEMENT
    if game_on:
        timer += 1
        if timer < 40:
            if not past_save:
                camera.draw(gamebox.from_text(400, 250, "Wait...", 60, "Red"))
            else:
                camera.draw(gamebox.from_text(2500, 250, "Wait...", 60, "Red"))
        elif 40 < timer < 105:
            if not past_save:
                camera.draw(gamebox.from_text(400, 250, "GO!", 60, "Red"))
            else:
                camera.draw(gamebox.from_text(2500, 250, "GO!", 60, "Red"))

        # Mario Movement
        if timer > 35:
            if pygame.K_UP in keys:
                for border in borders:  # Mario can only jump up if he is not in the air already
                    if mario.bottom_touches(border):
                        mario.speedy = -40
            if pygame.K_RIGHT in keys:
                mario.x += 10
            if pygame.K_LEFT in keys:
                mario.x += -10
            mario.move_speed()

        # Goomba Movement
        goomba.xspeed = goomba_velocity
        if goomba.x >= 375:
            goomba.x -= 10
            goomba_velocity *= -1
        if goomba.x <= 225:
            goomba.x += 10
            goomba_velocity *= -1
        goomba.move_speed()

        # Koopa Standing Movement
        koopa_standing.xspeed = koopa_velocity
        koopa_x = koopa_standing.x
        if koopa_standing.x > 1550:
            koopa_standing.x -= 15
            koopa_velocity *= -1
        if koopa_standing.x < 1200:
            koopa_standing.x += 15
            koopa_velocity *= -1
        koopa_standing.move_speed()

        # Koopa Spinning Movement
        koopa_spinning.xspeed = koopa_velocity
        if koopa_spinning.x > 1550:
            koopa_spinning.x -= 20
            koopa_velocity *= -1
        if koopa_spinning.x < 1200:
            koopa_spinning.x += 20
            koopa_velocity *= -1
        koopa_spinning.move_speed()

        # Bowser Movement
        bowser.xspeed = bowser_velocity
        if mario.x > 2800:
            if mario.x > bowser.x:
                bowser.speedx = 7
            elif mario.x < bowser.x:
                bowser.speedx = -7
            bowser.move_speed()

        # Fireballs resetting after going off screen
        if ball_of_fire.x < (position - 400) or ball_of_fire.x > (position + 400):
            ball_of_fire.y = 800
            ball_of_fire.speedx = 0
            ball_of_fire.speedy = 0
        ball_of_fire.move_speed()

        # Final Wall Going Down
        if bowser_dead:
            final_wall.speedy = -10

    # Save point
    if mario.x > 2500:
        past_save = True

    # Screen Movement
    if mario.x > position:
        if not bowser_dead:
            if mario.x < 3100:
                camera.center = [mario.x, 300]
                position = mario.x
        else:
            camera.center = [mario.x, 300]
            position = mario.x
            camera.draw(gamebox.from_text(400, 250, "Jump On Bowser 3 Times!", 60, "Red"))
    if mario.x < position - 400:
        mario.x = position - 400

    ## HOW MARIO INTERACTS WITH EMEMIES AND TRAPS
    if mario.y > 800:
        dead()

    # Goomba
    if goomba.top_touches(mario, 18) and mario.speedy > 0:
        mario.move_to_stop_overlapping(goomba)
        mario.speedy = -40
        goomba.y = 1000
        goomba_dead = True
    elif (mario.left_touches(goomba, 2) or mario.right_touches(goomba, 2)) and (mario.speedy <= 5):
        dead()

    # Koopa
    if koopa_standing.top_touches(mario, 20) and (mario.speedy > 0):
        mario.y -= 20
        mario.move_to_stop_overlapping(koopa_standing)
        mario.speedy = -40
        koopa_standing.y = 1000
        koopa_down = True
        koopa_velocity *= 1.7
        koopa_spinning.x = koopa_x
        koopa_spinning.y = 535
    elif mario.left_touches(koopa_standing) or mario.right_touches(koopa_standing) and mario.speedy <= 5:
        dead()
    if koopa_spinning.top_touches(mario, 17) and (mario.speedy > 0):
        mario.y -= 20
        mario.move_to_stop_overlapping(koopa_spinning)
        mario.speedy = -40
        koopa_spinning.y = 1000
        koopa_dead = True
    elif mario.left_touches(koopa_spinning) or mario.right_touches(koopa_spinning) and mario.speedy <= 5:
        dead()

    # Traps
    for trap in traps:
        if mario.left_touches(trap) or mario.right_touches(trap):
            dead()

    # Fireball and fire flower
    if mario.touches(fire_flower):
        dead()
    if (position - 400) < fire_flower.x < (position + 400):
        if mario.x < fire_flower.x:
            fireball(fire_flower.x, 50)
    if mario.touches(ball_of_fire):
        dead()

    # Bowser
    if (position - 400) < bowser.x < (position + 400):
        if not bowser_dead:
            fireball(bowser.x, 80)
    if bowser.top_touches(mario, 20) and (mario.speedy > 0):
        mario.y -= 100
        mario.move_to_stop_overlapping(bowser)
        mario.speedy = -40
        if bowser_health == 1:
            bowser_dead = True
            bowser.y = 800
        else:
            bowser_health -= 1
    elif mario.left_touches(bowser) or mario.right_touches(bowser) and mario.speedy <= 1:
        dead()
    if bowser_dead:
        final_wall.speedy = 5
        final_wall.move_speed()

    # How Mario interacts with the borders
    for border in borders:
        if mario.top_touches(border):
            mario.speedy = 0.5
            mario.move_to_stop_overlapping(border)
        if mario.left_touches(border, 3) or mario.right_touches(border, 3):
            if mario.speedy <= 0:
                mario.speedx *= -0.1
                mario.move_to_stop_overlapping(border)
                mario.speedy += 0.5
                keys.clear()
        if not mario.bottom_touches(border, 7):
            if mario.speedy < 40:
                mario.speedy += 0.55  # whenever mario is in the air he gains downward velocity
        else:
            mario.speedy = 0.2
            mario.move_to_stop_overlapping(border)

    # Drawing all the objects
    camera.draw(mario)
    camera.draw(peach)
    for border in borders:
        camera.draw(border)
    for trap in traps:
        camera.draw(trap)
    if not goomba_dead:
        camera.draw(goomba)
    if not koopa_dead:
        if not koopa_down:
            camera.draw(koopa_standing)
        else:
            camera.draw(koopa_spinning)
    if not bowser_dead:
        camera.draw(bowser)
    camera.draw(fire_flower)
    camera.draw(ball_of_fire)
    for i in range(health):
        list_of_hearts[i].x = (position - 380 + (i * 35))
        camera.draw(list_of_hearts[i])
    camera.draw(save_point_flag)
    camera.display()

gamebox.timer_loop(30, tick)
